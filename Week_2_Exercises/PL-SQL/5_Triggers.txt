-- Exercise 5: Triggers

-- Scenario 1: Automatically update the last modified date when a customer's record is updated.
-- o	Question: Write a trigger UpdateCustomerLastModified that updates the LastModified column of the Customers table to the current date whenever a customer's record is updated.

CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
    :NEW.LastModified := SYSDATE;
END;
/


-- Scenario 2: Maintain an audit log for all transactions.
-- o	Question: Write a trigger LogTransaction that inserts a record into an AuditLog table whenever a transaction is inserted into the Transactions table.

CREATE TABLE AuditLog (
    LogID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    TransactionID NUMBER,
    ActionType VARCHAR2(50),
    ActionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Details VARCHAR2(4000)
);

CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
    INSERT INTO AuditLog (TransactionID, ActionType, Details)
    VALUES (:NEW.TransactionID, 'INSERT', 'New transaction inserted with ID: ' || :NEW.TransactionID);
END;
/



-- Scenario 3: Enforce business rules on deposits and withdrawals.
-- o	Question: Write a trigger CheckTransactionRules that ensures withdrawals do not exceed the balance and deposits are positive before inserting a record into the Transactions table.

CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
BEGIN
    IF :NEW.transactiontype = 'WITHDRAWAL' THEN
        SELECT balance INTO :new.balance FROM accounts
        WHERE accountid = :NEW.accountid;
        IF :new.amount > :new.balance THEN
            RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds');
        END IF;
    ELSIF :NEW.transactiontype = 'DEPOSIT' THEN
        IF :NEW.amount <= 0 THEN
            RAISE_APPLICATION_ERROR(-20002, 'Deposit amount must be positive');
        END IF;
    END IF;
END;
/

